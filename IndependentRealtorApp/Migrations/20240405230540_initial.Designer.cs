// <auto-generated />
using System;
using IndependentRealtorApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IndependentRealtorApp.Migrations
{
    [DbContext(typeof(RealtorContext))]
    [Migration("20240405230540_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IndependentRealtorApp.Models.PropertyItem", b =>
                {
                    b.Property<int>("PropertyItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyItemId"));

                    b.Property<string>("PropertyItemAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyItemCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyItemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyItemState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyItemStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyItemTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyItemZip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PublicUserId")
                        .HasColumnType("int");

                    b.Property<int?>("RealtorId")
                        .HasColumnType("int");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyItemId");

                    b.HasIndex("PublicUserId");

                    b.HasIndex("RealtorId");

                    b.ToTable("PropertyItems");

                    b.HasData(
                        new
                        {
                            PropertyItemId = 1,
                            PropertyItemAddress = "123 Oak St",
                            PropertyItemCity = "Somewhere",
                            PropertyItemDescription = "Cottage Styled 3 bed, 2 bath, with a 2 car garage.",
                            PropertyItemState = "IA",
                            PropertyItemStatus = "For Sale",
                            PropertyItemTitle = "3 bedroom, 2 bath, 2 car garage",
                            PropertyItemZip = "50266",
                            imageUrl = "images/123oak.jpg"
                        },
                        new
                        {
                            PropertyItemId = 2,
                            PropertyItemAddress = "456 Maple Ave",
                            PropertyItemCity = "Somewhere",
                            PropertyItemDescription = "Ranch Styled 4 bed, 3 bath, with a 3 car garage.",
                            PropertyItemState = "IA",
                            PropertyItemStatus = "Pending",
                            PropertyItemTitle = "4 bed, 3 bath, 3 car garage",
                            PropertyItemZip = "50266",
                            imageUrl = "images/456maple.jpg"
                        },
                        new
                        {
                            PropertyItemId = 3,
                            PropertyItemAddress = "789 Elm St",
                            PropertyItemCity = "Somewhere",
                            PropertyItemDescription = "Two Story 4 bed, 2.5 bath, with a car port and large back yard.",
                            PropertyItemState = "IA",
                            PropertyItemStatus = "For Sale",
                            PropertyItemTitle = "4 bed, 2.5 bath",
                            PropertyItemZip = "50266",
                            imageUrl = "images/789elm.jpg"
                        },
                        new
                        {
                            PropertyItemId = 4,
                            PropertyItemAddress = "812 gravel Rd",
                            PropertyItemCity = "Ruraltown",
                            PropertyItemDescription = "Farm home 3 bed, 2 bath, on an acreage.",
                            PropertyItemState = "IA",
                            PropertyItemStatus = "For Sale",
                            PropertyItemTitle = "3 bed, 1.5 bath on an acreage.",
                            PropertyItemZip = "50266",
                            imageUrl = "images/812gravel.jpg"
                        });
                });

            modelBuilder.Entity("IndependentRealtorApp.Models.PublicUser", b =>
                {
                    b.Property<int>("PublicUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublicUserId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicUserNameEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicUserPassword")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("PublicUserId");

                    b.ToTable("PublicUsers");
                });

            modelBuilder.Entity("IndependentRealtorApp.Models.Realtor", b =>
                {
                    b.Property<int>("RealtorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RealtorId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserNameEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RealtorId");

                    b.ToTable("Realtors");

                    b.HasData(
                        new
                        {
                            RealtorId = 1,
                            FirstName = "Timothy",
                            LastName = "Goodsale",
                            Password = "password",
                            UserNameEmail = "tgoodsale@fakerealty.com",
                            imageUrl = "images/tgoodsale.jpg"
                        });
                });

            modelBuilder.Entity("IndependentRealtorApp.Models.PropertyItem", b =>
                {
                    b.HasOne("IndependentRealtorApp.Models.PublicUser", null)
                        .WithMany("PropertyItems")
                        .HasForeignKey("PublicUserId");

                    b.HasOne("IndependentRealtorApp.Models.Realtor", null)
                        .WithMany("PropertyItems")
                        .HasForeignKey("RealtorId");
                });

            modelBuilder.Entity("IndependentRealtorApp.Models.PublicUser", b =>
                {
                    b.Navigation("PropertyItems");
                });

            modelBuilder.Entity("IndependentRealtorApp.Models.Realtor", b =>
                {
                    b.Navigation("PropertyItems");
                });
#pragma warning restore 612, 618
        }
    }
}
