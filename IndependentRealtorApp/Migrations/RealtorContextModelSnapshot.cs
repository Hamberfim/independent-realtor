// <auto-generated />
using System;
using IndependentRealtorApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IndependentRealtorApp.Migrations
{
    [DbContext(typeof(RealtorContext))]
    partial class RealtorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IndependentRealtorApp.Models.DomainModels.Property", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PropertyId"));

                    b.Property<string>("PropertyAddress")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("PropertyCity")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("PropertyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PropertyPrice")
                        .IsRequired()
                        .HasColumnType("float");

                    b.Property<string>("PropertyState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("PropertyStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PropertyTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PropertyZip")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("RealtorId")
                        .HasColumnType("int");

                    b.Property<string>("imageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyId");

                    b.HasIndex("RealtorId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            PropertyAddress = "1234 Olive St.",
                            PropertyCity = "Anytown",
                            PropertyDescription = "3 bedroom, 2 bath cottage styled bungalow",
                            PropertyPrice = 215000.0,
                            PropertyState = "IA",
                            PropertyStatus = "for sale",
                            PropertyTitle = "Cottage Bungalow",
                            PropertyZip = "50266",
                            RealtorId = 1,
                            imageUrl = "images/1234olive.jpg"
                        },
                        new
                        {
                            PropertyId = 2,
                            PropertyAddress = "5561 Art Nuevo Ave.",
                            PropertyCity = "Sometown",
                            PropertyDescription = "5 bedroom, 2.5 bath turn of the century deco styled two story",
                            PropertyPrice = 450000.0,
                            PropertyState = "IA",
                            PropertyStatus = "for sale",
                            PropertyTitle = "Deco Two Story",
                            PropertyZip = "50266",
                            RealtorId = 1,
                            imageUrl = "images/5561artnuevo.jpg"
                        },
                        new
                        {
                            PropertyId = 3,
                            PropertyAddress = "12 Gravel Rd.",
                            PropertyCity = "Ruraltown",
                            PropertyDescription = "4 bedroom, 2 bath ranch acreage",
                            PropertyPrice = 385000.0,
                            PropertyState = "IA",
                            PropertyStatus = "pending",
                            PropertyTitle = "Ranch Acreage",
                            PropertyZip = "50266",
                            RealtorId = 1,
                            imageUrl = "images/12gravel.jpg"
                        },
                        new
                        {
                            PropertyId = 4,
                            PropertyAddress = "321 Corinda St",
                            PropertyCity = "Anytown",
                            PropertyDescription = "2 bedroom, 1.5 bath bungalow",
                            PropertyPrice = 205000.0,
                            PropertyState = "NY",
                            PropertyStatus = "for sale",
                            PropertyTitle = "Two bedroom Bungalow",
                            PropertyZip = "12345",
                            RealtorId = 1,
                            imageUrl = "images/321corinda.jpg"
                        },
                        new
                        {
                            PropertyId = 5,
                            PropertyAddress = "756 Lincoln Blvd.",
                            PropertyCity = "Metro-City",
                            PropertyDescription = "3 bedroom, 2 bath Stylish Townhome",
                            PropertyPrice = 279900.0,
                            PropertyState = "IA",
                            PropertyStatus = "for sale",
                            PropertyTitle = "Stylish Townhome",
                            PropertyZip = "55555",
                            RealtorId = 1,
                            imageUrl = "images/756lincoln.jpg"
                        },
                        new
                        {
                            PropertyId = 6,
                            PropertyAddress = "5 West Woods Rd",
                            PropertyCity = "Anytown",
                            PropertyDescription = "17 undeveloped acres just west of the city.",
                            PropertyPrice = 86700.0,
                            PropertyState = "IA",
                            PropertyStatus = "for sale",
                            PropertyTitle = "17 acres for development",
                            PropertyZip = "55555",
                            RealtorId = 1,
                            imageUrl = "images/5westwoods.jpg"
                        },
                        new
                        {
                            PropertyId = 7,
                            PropertyAddress = "16 East Prosaic St",
                            PropertyCity = "Metro-City",
                            PropertyDescription = "2 bedroom, 2 bath just minutes from downtown.",
                            PropertyPrice = 199900.0,
                            PropertyState = "IA",
                            PropertyStatus = "for sale",
                            PropertyTitle = "Charming home close to downtown",
                            PropertyZip = "55555",
                            RealtorId = 1,
                            imageUrl = "images/16east.jpg"
                        });
                });

            modelBuilder.Entity("IndependentRealtorApp.Models.DomainModels.PropertyUser", b =>
                {
                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PropertyId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PropertyUsers");

                    b.HasData(
                        new
                        {
                            PropertyId = 1,
                            UserId = 1
                        },
                        new
                        {
                            PropertyId = 1,
                            UserId = 2
                        },
                        new
                        {
                            PropertyId = 2,
                            UserId = 1
                        },
                        new
                        {
                            PropertyId = 2,
                            UserId = 3
                        },
                        new
                        {
                            PropertyId = 3,
                            UserId = 4
                        },
                        new
                        {
                            PropertyId = 3,
                            UserId = 7
                        },
                        new
                        {
                            PropertyId = 4,
                            UserId = 5
                        },
                        new
                        {
                            PropertyId = 4,
                            UserId = 6
                        },
                        new
                        {
                            PropertyId = 5,
                            UserId = 5
                        },
                        new
                        {
                            PropertyId = 5,
                            UserId = 3
                        },
                        new
                        {
                            PropertyId = 6,
                            UserId = 2
                        },
                        new
                        {
                            PropertyId = 6,
                            UserId = 4
                        },
                        new
                        {
                            PropertyId = 7,
                            UserId = 1
                        },
                        new
                        {
                            PropertyId = 7,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("IndependentRealtorApp.Models.DomainModels.Realtor", b =>
                {
                    b.Property<int>("RealtorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RealtorId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("RealtorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RealtorId");

                    b.ToTable("Realtors");

                    b.HasData(
                        new
                        {
                            RealtorId = 1,
                            FirstName = "Timothy",
                            LastName = "Goodsale",
                            RealtorEmail = "tgoodsale@fakerealty.com"
                        });
                });

            modelBuilder.Entity("IndependentRealtorApp.Models.DomainModels.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            FirstName = "Sam",
                            LastName = "Smith",
                            UserEmail = "ssmith@fakeworld.net"
                        },
                        new
                        {
                            UserId = 2,
                            FirstName = "Linda",
                            LastName = "Beltcher",
                            UserEmail = "lbeltcher@fakeworld.net"
                        },
                        new
                        {
                            UserId = 3,
                            FirstName = "Bob",
                            LastName = "Beltcher",
                            UserEmail = "bbeltcher@fakeworld.net"
                        },
                        new
                        {
                            UserId = 4,
                            FirstName = "Kathy",
                            LastName = "Klien",
                            UserEmail = "kklien@fakeworld.net"
                        },
                        new
                        {
                            UserId = 5,
                            FirstName = "Billy",
                            LastName = "Williams",
                            UserEmail = "bwilliams@fakeworld.net"
                        },
                        new
                        {
                            UserId = 6,
                            FirstName = "Sarah",
                            LastName = "Seashell",
                            UserEmail = "sseashell@fakeworld.net"
                        },
                        new
                        {
                            UserId = 7,
                            FirstName = "Steven",
                            LastName = "Klien",
                            UserEmail = "sklien@fakeworld.net"
                        });
                });

            modelBuilder.Entity("IndependentRealtorApp.Models.DomainModels.Property", b =>
                {
                    b.HasOne("IndependentRealtorApp.Models.DomainModels.Realtor", "Realtor")
                        .WithMany("Properties")
                        .HasForeignKey("RealtorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Realtor");
                });

            modelBuilder.Entity("IndependentRealtorApp.Models.DomainModels.PropertyUser", b =>
                {
                    b.HasOne("IndependentRealtorApp.Models.DomainModels.Property", "Property")
                        .WithMany("PropertyUsers")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IndependentRealtorApp.Models.DomainModels.User", "User")
                        .WithMany("PropertyUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IndependentRealtorApp.Models.DomainModels.Property", b =>
                {
                    b.Navigation("PropertyUsers");
                });

            modelBuilder.Entity("IndependentRealtorApp.Models.DomainModels.Realtor", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("IndependentRealtorApp.Models.DomainModels.User", b =>
                {
                    b.Navigation("PropertyUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
